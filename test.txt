-- Create tables for job descriptions and analysis results
CREATE OR REPLACE FUNCTION public.create_job_description_table()
RETURNS void AS $$
BEGIN
  IF NOT EXISTS (SELECT FROM pg_tables WHERE tablename = 'job_descriptions') THEN
    CREATE TABLE public.job_descriptions (
      id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
      description TEXT NOT NULL,
      folder_id UUID REFERENCES public.folders(id) ON DELETE CASCADE,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      "userId" TEXT NOT NULL
    );

    -- Add RLS policies
    ALTER TABLE public.job_descriptions ENABLE ROW LEVEL SECURITY;

    -- Policy for selecting records
    CREATE POLICY select_job_descriptions ON public.job_descriptions 
        FOR SELECT 
        USING (auth.uid()::text = "userId");

    -- Policy for inserting records
    CREATE POLICY insert_job_descriptions ON public.job_descriptions 
        FOR INSERT 
        WITH CHECK (auth.uid()::text = "userId");

    -- Policy for updating records
    CREATE POLICY update_job_descriptions ON public.job_descriptions 
        FOR UPDATE 
        USING (auth.uid()::text = "userId");

    -- Policy for deleting records
    CREATE POLICY delete_job_descriptions ON public.job_descriptions 
        FOR DELETE 
        USING (auth.uid()::text = "userId");
        
    -- Create indexes
    CREATE INDEX job_descriptions_folder_id_idx ON public.job_descriptions(folder_id);
    CREATE INDEX job_descriptions_user_id_idx ON public.job_descriptions("userId");
  END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.create_analysis_results_table()
RETURNS void AS $$
BEGIN
  IF NOT EXISTS (SELECT FROM pg_tables WHERE tablename = 'analysis_results') THEN
    CREATE TABLE public.analysis_results (
      id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
      file_id UUID NOT NULL REFERENCES public.files(id) ON DELETE CASCADE,
      job_description_id UUID NOT NULL REFERENCES public.job_descriptions(id) ON DELETE CASCADE,
      match_score NUMERIC(5,2) NOT NULL,
      strengths JSONB,
      weaknesses JSONB,
      achievement_bonus NUMERIC(5,2),
      aspect_scores JSONB,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      "userId" TEXT NOT NULL
    );

    -- Add RLS policies
    ALTER TABLE public.analysis_results ENABLE ROW LEVEL SECURITY;

    -- Policy for selecting records
    CREATE POLICY select_analysis_results ON public.analysis_results 
        FOR SELECT 
        USING (auth.uid()::text = "userId");

    -- Policy for inserting records
    CREATE POLICY insert_analysis_results ON public.analysis_results 
        FOR INSERT 
        WITH CHECK (auth.uid()::text = "userId");

    -- Policy for updating records
    CREATE POLICY update_analysis_results ON public.analysis_results 
        FOR UPDATE 
        USING (auth.uid()::text = "userId");

    -- Policy for deleting records
    CREATE POLICY delete_analysis_results ON public.analysis_results 
        FOR DELETE 
        USING (auth.uid()::text = "userId");
        
    -- Create indexes
    CREATE INDEX analysis_results_file_id_idx ON public.analysis_results(file_id);
    CREATE INDEX analysis_results_job_description_id_idx ON public.analysis_results(job_description_id);
    CREATE INDEX analysis_results_user_id_idx ON public.analysis_results("userId");
  END IF;
END;
$$ LANGUAGE plpgsql;

-- Execute the functions to create the tables
SELECT create_job_description_table();
SELECT create_analysis_results_table();

-- Function to store a job description for a folder
CREATE OR REPLACE FUNCTION public.store_job_description(
  p_description TEXT,
  p_folder_id UUID,
  p_user_id TEXT
)
RETURNS UUID AS $$
DECLARE
  v_job_description_id UUID;
BEGIN
  INSERT INTO public.job_descriptions (description, folder_id, "userId")
  VALUES (p_description, p_folder_id, p_user_id)
  RETURNING id INTO v_job_description_id;
  
  RETURN v_job_description_id;
END;
$$ LANGUAGE plpgsql;

-- Function to store analysis results for a file
CREATE OR REPLACE FUNCTION public.store_analysis_result(
  p_file_id UUID,
  p_job_description_id UUID,
  p_match_score NUMERIC(5,2),
  p_strengths JSONB,
  p_weaknesses JSONB,
  p_achievement_bonus NUMERIC(5,2),
  p_aspect_scores JSONB,
  p_user_id TEXT
)
RETURNS UUID AS $$
DECLARE
  v_analysis_result_id UUID;
BEGIN
  -- Check if analysis result already exists for this file and job description
  SELECT id INTO v_analysis_result_id 
  FROM public.analysis_results 
  WHERE file_id = p_file_id AND job_description_id = p_job_description_id;
  
  -- If it exists, update it
  IF v_analysis_result_id IS NOT NULL THEN
    UPDATE public.analysis_results
    SET match_score = p_match_score,
        strengths = p_strengths,
        weaknesses = p_weaknesses,
        achievement_bonus = p_achievement_bonus,
        aspect_scores = p_aspect_scores,
        created_at = NOW()
    WHERE id = v_analysis_result_id;
  -- Otherwise, insert a new record
  ELSE
    INSERT INTO public.analysis_results (
      file_id, 
      job_description_id, 
      match_score, 
      strengths, 
      weaknesses, 
      achievement_bonus, 
      aspect_scores, 
      "userId"
    )
    VALUES (
      p_file_id, 
      p_job_description_id, 
      p_match_score, 
      p_strengths, 
      p_weaknesses, 
      p_achievement_bonus, 
      p_aspect_scores, 
      p_user_id
    )
    RETURNING id INTO v_analysis_result_id;
  END IF;
  
  RETURN v_analysis_result_id;
END;
$$ LANGUAGE plpgsql;

-- Function to get the latest job description for a folder
CREATE OR REPLACE FUNCTION public.get_latest_job_description(p_folder_id UUID)
RETURNS TABLE (
  id UUID,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
  RETURN QUERY
  SELECT jd.id, jd.description, jd.created_at
  FROM public.job_descriptions jd
  WHERE jd.folder_id = p_folder_id
  ORDER BY jd.created_at DESC
  LIMIT 1;
END;
$$ LANGUAGE plpgsql;

-- Function to get analysis results for files in a folder
CREATE OR REPLACE FUNCTION public.get_folder_analysis_results(p_folder_id UUID)
RETURNS TABLE (
  file_id UUID,
  file_name TEXT,
  match_score NUMERIC(5,2),
  strengths JSONB,
  weaknesses JSONB,
  achievement_bonus NUMERIC(5,2),
  aspect_scores JSONB,
  analyzed_at TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    f.id as file_id,
    f.name as file_name,
    ar.match_score,
    ar.strengths,
    ar.weaknesses,
    ar.achievement_bonus,
    ar.aspect_scores,
    ar.created_at as analyzed_at
  FROM 
    public.files f
  LEFT JOIN 
    public.analysis_results ar ON f.id = ar.file_id
  LEFT JOIN 
    public.job_descriptions jd ON ar.job_description_id = jd.id
  WHERE 
    f."folderId" = p_folder_id
  ORDER BY 
    ar.created_at DESC;
END;
$$ LANGUAGE plpgsql;

-- Create a view to easily display files with their latest analysis results
CREATE OR REPLACE VIEW public.files_with_analysis AS
SELECT 
  f.id as file_id,
  f.name as file_name,
  f."folderId" as folder_id,
  f."userId",
  ar.id as analysis_id,
  ar.match_score,
  ar.strengths,
  ar.weaknesses,
  ar.achievement_bonus,
  ar.aspect_scores,
  ar.created_at as analyzed_at,
  jd.id as job_description_id,
  jd.description as job_description
FROM 
  public.files f
LEFT JOIN 
  public.analysis_results ar ON f.id = ar.file_id
LEFT JOIN 
  public.job_descriptions jd ON ar.job_description_id = jd.id;

-- Example of how to use these functions:
-- 1. Store a job description for a folder
-- SELECT store_job_description('Job requires Python skills and 5 years experience', 'folder-uuid', 'user-id');

-- 2. Store analysis results for a file
-- SELECT store_analysis_result(
--   'file-uuid', 
--   'job-description-uuid', 
--   85.5, 
--   '["Strong Python skills", "Good communication"]'::jsonb, 
--   '["Lacks experience"]'::jsonb, 
--   5.0, 
--   '{"technical": 90, "experience": 70, "education": 85}'::jsonb, 
--   'user-id'
-- );

-- 3. Get the latest job description for a folder
-- SELECT * FROM get_latest_job_description('folder-uuid');

-- 4. Get analysis results for files in a folder
-- SELECT * FROM get_folder_analysis_results('folder-uuid');

-- 5. Query the view to get files with their analysis results
-- SELECT * FROM files_with_analysis WHERE folder_id = 'folder-uuid';